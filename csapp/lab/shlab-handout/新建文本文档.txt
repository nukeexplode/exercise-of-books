char* argv[MAXARGS];//Argument list execve()
	char buf[MAXLINE];//Holds modifiled command line
	int fg, jid;//Should the job run in bg or fg?
	pid_t pid;//Process id
	sigset_t mask_all, mask_one, prev_one;
	
	Sigfillset(&mask_all);//mask_all contains all kinds of signals
	Sigemptyset(&mask_one);
	Sigaddset(&mask_one, SIGCHLD);//mask_one blocks signal 'SIGCHLD'

	strcpy(buf, cmdline);
	fg = !parseline(buf, argv);
	if(argv[0] == NULL)
		return;//Ignore empty lines
	if(!builtin_cmd(argv))//If it is a builtin command, then the builtin_cmd() will execute it
	{
		Sigprocmask(SIG_BLOCK, &mask_one, &prev_one);//block SIGCHLD to avoid race
		if((pid = Fork()) == 0)//Child runs user job
		{
			setpgrp();//set the process's groupid to its pid
			//why? see Write-Up for more details
			Sigprocmask(SIG_SETMASK, &prev_one, NULL);//restore the initial mask vector
			if(execve(argv[0], argv, environ) < 0)
			{
				printf("%s: Command not found\n", argv[0]);
				exit(-1);
			}
		}
		Sigprocmask(SIG_BLOCK, &mask_all, NULL);//block all signals, do the addjob()
		//Parent waits for foreground job to terminate
		if(fg)
		{
			flag = 0;//set the global flag varible, indicate whether the forground job has finished
			addjob(jobs, pid, FG, buf);
			//Attention! The signals are still being blocked
			waitfg(pid);
		}
		else//background
		{
			jid = addjob(jobs, pid, BG, buf);
			Sigprocmask(SIG_SETMASK, &prev_one, NULL); //restore intial block vector
			printf("[%d] (%d) %s", jid, pid, buf);		
		}
	}
    return;
}





void eval(char *cmdline) 
{
    char* argv[MAXARGS];
    pid_t pid;
    sigset_t mask;
    int fgorbg = parseline(cmdline,argv);
    if(argv[0] == NULL)
        return;
    sigemptyset(&mask);
    sigaddset(&mask,SIGCHLD);
    sigprocmask(SIG_BLOCK,&mask,NULL);
    if(!builtin_cmd(argv)){
        if((pid = fork()) == 0){
            sigprocmask(SIG_UNBLOCK,&mask,NULL);        //子进程也是要解除阻塞的
            if(setpgid(0,0)<0)
                 unix_error("eval: setgpid failed.\n");  
            if(execve(argv[0],argv,environ)<0){
                printf("%s: Command not found.\n",argv[0]);
                exit(0);
            }
        }
        if(!fgorbg)
            addjob(jobs,pid,FG,cmdline);
        else
            addjob(jobs,pid,BG,cmdline);
        sigprocmask(SIG_UNBLOCK,&mask,NULL);        //这里一定要addjob之后再解除阻塞
        if(!fgorbg) // FG job
            waitfg(pid);
        else
            printf("[%d] (%d) %s\n",pid2jid(pid),pid,cmdline);
    }

    return;
}
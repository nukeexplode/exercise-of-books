(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (if (= (length args) 2)
              (let ((type1 (car type-tags))
                    (type2 (cadr type-tags))
                    (input1 (car args))
                    (input2 (cadr args)))
                (let ((input1->input2 (get type1 type2))
                      (input2->input1 (get type2 type1)))
                  (let ((diff (higher? type1 type2)))
                    (cond ((= diff 0) (error "same type"))
                          ((> diff 0) (apply-generic op input1 (raise input2)))
                          ((< diff 0) (apply-generic op (raise input1) input2))))))
              (error "length is wrong"))))))

(define (higher? t1 t2)
  (define (type-val x)
    (cond ((eq? scheme-number x) 1)
          ((eq? rational x) 2)
          ((eq? real x) 3)
          ((eq? complex x) 4)))
  (- (type-val t1) (type-val t2)))